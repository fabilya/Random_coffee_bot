from aiogram import F, Router
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery, Message, FSInputFile

from admin_panel.telegram.models import TgUser
from tg_bot.config import HOST_IP
from tg_bot.db import db_commands as db
from tg_bot.keyboards.callback_data import BlockUserCallback
from tg_bot.keyboards.inline import kb_block_unblock_user, kb_cancel
from tg_bot.middlewares.admin import AdminMiddleware
from tg_bot.misc.utils import delete_message
from tg_bot.states.all_states import Admin

admin_router = Router()
admin_router.message.middleware(AdminMiddleware())
admin_router.callback_query.middleware(AdminMiddleware())

ADMIN_WELCOME_TEXT = (
    '–î–æ—Å—Ç—É–ø –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–º —Ñ—É–Ω–∫—Ü–∏—è–º –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç—Å—è —á–µ—Ä–µ–∑ '
    f'<a href="http://{HOST_IP}">—Å–∞–π—Ç</a>.\n'
    '–î–ª—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è <b>—á–µ—Ä–µ–∑ –±–æ—Ç</b>, –≤–≤–µ–¥–∏—Ç–µ –µ–≥–æ –ø–æ—á—Ç—É:'
)

USER_NOT_EXIST = (
    '–¢–∞–∫–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!\n'
    '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.'
)

ABOUT_USER = (
    'üíº<b>–î–ê–ù–ù–´–ï –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø:</b>üíº\n'
    '__________________________________\n'
    'üîâ<b>–∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—è:</b> {tg_model.enter_full_name}\n'
    'üîâ<b>–Ω–∏–∫–Ω–µ–π–º:</b> {tg_model.username}\n'
    'üîâ<b>–ø–æ–ª–Ω–æ–µ –∏–º—è –≤ —Ç–≥:</b> {tg_model.full_name}\n'
)


@admin_router.message(Command('admin'))
async def admin_message(message: Message, state: FSMContext):
    """–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –≤–≤–µ—Å—Ç–∏ –ø–æ—á—Ç—É."""
    msg = await message.answer(text=ADMIN_WELCOME_TEXT)
    await state.set_state(Admin.get_email)
    await delete_message(msg)


@admin_router.message(Admin.get_email)
async def get_name(message: Message):
    """–ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î –ø–æ –≤–≤–µ–¥—ë–Ω–Ω–æ–π —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π –ø–æ—á—Ç–µ."""
    tg_model: TgUser = await db.search_tg_user(message.text.lower())

    if tg_model:
        msg = await message.answer_photo(
            photo=FSInputFile(tg_model.picture.path.replace('media', 'media/TgUsers')),
            caption=ABOUT_USER.format(tg_model=tg_model),
            reply_markup=kb_block_unblock_user(tg_user=tg_model))
        await delete_message(msg)
    else:
        await message.answer(text=USER_NOT_EXIST,
                             reply_markup=kb_cancel(),
                             )


@admin_router.callback_query(Admin.get_email, F.data == 'cancel')
async def stop(callback: CallbackQuery, state: FSMContext):
    """–û—Ç–º–µ–Ω–∞."""
    await callback.message.answer("–í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ —Ç–µ–∫—É—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ")
    await callback.message.delete()
    await state.clear()


@admin_router.callback_query(BlockUserCallback.filter())
async def unblock(callback: CallbackQuery, callback_data: BlockUserCallback):
    """–†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å/–∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    await callback.message.delete()
    user_id = callback_data.user_id
    tg_model = await db.get_tg_user(user_id)
    tg_model.is_unblocked = not callback_data.block
    await db.save_model(tg_model)

    msg = '—Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω' if tg_model.is_unblocked else '–∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω'

    msg = await callback.message.answer(
        f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {tg_model.enter_full_name} {msg}'
    )
    await delete_message(msg)
